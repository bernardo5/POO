package blackjackG21;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

import blackjackG21.Card.Rank;

public class Game {
	
	private int minBet;
	private int maxBet;
	private int nDecks;
	private int shufflePercentage; //% of shoe played begore shuffling 10-100
	private Dealer dealer;
	private RegularPlayer player;
	private Shoe shoe;
	
	public Game(int minBet,	int maxBet, int playersBalance,	int nDecks,	int shufflePercentage/*, String file*/){
		this.minBet=minBet;
		this.maxBet=maxBet;
		this.nDecks=nDecks;
		this.shufflePercentage=shufflePercentage;
		shoe=new Shoe(nDecks, shufflePercentage);
		//shoe.populateShoeFromFile(file, nDecks);
		shoe.populateShoe(nDecks);
		player=new RegularPlayer(playersBalance);
		dealer=new Dealer();
	}
	
	public void distributeHands(){
		Hand p=new Hand(shoe.takeCard(), shoe.takeCard());
		Hand d=new Hand(shoe.takeCard(), shoe.takeCard());
		player.getHand(p);
		dealer.getHand(d);
	}
	
	public void showCards(){
		System.out.println("Player hand: "+ player.showHands());
		System.out.println("Dealer's hand: "+ dealer.showHands());
		
	}
	
	public int placeFirstBet(int bet){//the player has to do at least a bet
		System.out.println("bet command");
		if((bet==-1)||(bet<minBet)){
			player.setBalance(player.getBalance()-minBet);
			player.setCurrentBet(minBet);
			return minBet;
		}else{
			player.setBalance(player.getBalance()-bet);
			player.setCurrentBet(bet);
			return bet;
		}
	}
	
	public boolean placeBet(int bet){//the player has to do at least a bet
		System.out.println("bet command");
		if(bet>player.getBalance()){
			System.out.println("You cannot afford this bet. Your balance is:"+player.getBalance());
			return false;
		}else{
			player.setBalance(player.getBalance()-bet);
			player.setCurrentBet(player.getCurrentBet()+bet);
			return true;
		}
	}
	
	public String[] getCommand(char mode){
		if(mode=='i'){//interactive mode
			String s=new String();
			String command=new String();
			Scanner scanner;
			int bet=-1;
			BufferedReader bufferRead = new BufferedReader(new InputStreamReader(System.in));
	        try {
				s = bufferRead.readLine();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        scanner = new Scanner (s);
	        command =	scanner.next ();
	        if(scanner.hasNextInt())bet=scanner.nextInt();
			scanner.close();
			return new String[]{command, Integer.toString(bet)};
		}else if(mode=='d'){//debug mode
			
		}else if(mode=='s'){//simulation mode
			
		}
		return null;
	}
	
	public void play(char mode){
		boolean tight=false;
		boolean playing=false;
		int bust=0;
		int bDealer=0;
		String[] command;
		boolean prevBetFlag=false;
		int prevBet = 0;
		boolean dealFlag=false;
		boolean sideRules=false;
		boolean insurance_flag=false;//says if it is possible to ask for insurance
		while((player.getBalance()>=minBet)||(playing)){
			if(shoe.calculateUsagePercentage()>=shoe.getShufflePercentage()){
				System.out.println("Shuffling...");
				shoe.shuffle();
			}
			command=this.getCommand(mode);
			switch(command[0]){
				case "b": 
					if(!dealFlag){
						playing=true;
						if(prevBetFlag){
							if(Integer.parseInt(command[1])==-1){
								this.placeBet(prevBet);
							}else{
								if(this.placeBet(Integer.parseInt(command[1]))) 
									prevBet=Integer.parseInt(command[1]);
								
							} 
						}else{
							prevBet=this.placeFirstBet(Integer.parseInt(command[1]));
							prevBetFlag=true;
						}
					}else System.out.println("b: Illegal command");
					break;
				case "$":
					System.out.println("Your current balance is: "+player.getBalance());
					break;
				case "d":
					if(prevBetFlag){
						dealFlag=true;
						sideRules=true;
						this.distributeHands();
						this.showCards();
						if((dealer.returnShownCard()).equals(Rank.ACE)){
							insurance_flag=true;
						}
						if(player.hands.getFirst().getTotal()==21){//blackjack
							if(dealer.hands.getFirst().getTotal()==21){//dealer also has blackjack
								player.setBalance(player.getBalance()+((player.getCurrentBet())));
								System.out.println("nobody won this round!!!");
							}else{
								//player won-blackjack pays 3 to 2
								player.setBalance(player.getBalance()+((3*player.getCurrentBet())/2)+player.getCurrentBet());
								System.out.println("You won this round!!!");
							}
							System.out.println("end of turn");
							player.setCurrentBet(0);
							player.hands.clear();
							dealer.hands.clear();
							dealFlag=false;
							prevBetFlag=false;
							sideRules=false;
						}
					}else System.out.println("You havent placed your bet yet");
					break;
				case "h":
					if(prevBetFlag){
						System.out.println("hit option");
						sideRules=false;
						//get a new card to the hand
						bust=player.hit(shoe.takeCard(), 0);
						this.showCards();
						if(bust==1){
							//dealer won
							player.setCurrentBet(0);
							dealFlag=false;
							prevBetFlag=false;
							bust=0;
							player.hands.clear();
							dealer.hands.clear();
							playing=false;
							insurance_flag=false;
						}
					}else System.out.println("You havent placed your bet yet");
						break;
				case "s":
					if(prevBetFlag){
						playing=false;
						insurance_flag=false;
						System.out.println("stand option");
						//fazer a parte do dealer
						
						while(dealer.hands.getFirst().getTotal()<=17){
							bDealer=dealer.hit(shoe.takeCard(), 0);
						}
						this.showCards();
						if(bDealer==0){//dealer didnot bust
							for(Hand h:player.hands){//check if a players hand beats the dealer's hand
								if(h.getTotal()>=dealer.hands.getFirst().getTotal()){
									if(h.getTotal()==dealer.hands.getFirst().getTotal()){
										//check who has less cards
										if(h.getHand().size()<dealer.hands.getFirst().getHand().size()){
											//player has less cards
											player.setBalance(player.getBalance()+(2*player.getCurrentBet()));
											System.out.println("You won this round!!!");
										}else if(h.getHand().size()==dealer.hands.getFirst().getHand().size()){
											//same card number
											tight=true;
										}
									}else{
										//player won
										player.setBalance(player.getBalance()+(2*player.getCurrentBet()));
										System.out.println("You won this round!!!");
									}
									
									break;
								}
							}
							
							if(tight){
								player.setBalance(player.getBalance()+player.getCurrentBet());
								System.out.println("Nobody won this round!!!");
								tight=false;
							}
						}else{//player won
							player.setBalance(player.getBalance()+(2*player.getCurrentBet()));
							System.out.println("You won this round!!!");
						}
						
						System.out.println("end of turn");
						player.setCurrentBet(0);
						player.hands.clear();
						dealer.hands.clear();
						dealFlag=false;
						prevBetFlag=false;
					}else System.out.println("You havent placed your bet yet");
					break;
				case "i":
					if(prevBetFlag&&sideRules&&insurance_flag){
						System.out.println("insurance option");
						if(dealer.hands.getFirst().getTotal()==21){//dealer has blackjack
							player.addBalance(player.getCurrentBet());
						}
					}else System.out.println("You cannot use side rules at the moment");
					break;
				case "u":
					if(prevBetFlag&&sideRules){
						System.out.println("surrender option");
						player.addBalance((float)player.getCurrentBet()/2);
						player.setCurrentBet(0);
						player.hands.clear();
						dealer.hands.clear();
						dealFlag=false;
						prevBetFlag=false;
					}else System.out.println("You cannot use side rules at the moment");
					break;
				case "p":
					if(prevBetFlag&&sideRules){
						System.out.println("splitting option");
						/*for(Hand h:player.hands){
							//if cards have the same face value
							if(h.getHand().get(0).getRank().getRankPoints()==h.getHand().get(1).getRank().getRankPoints()){
								System.out.println("split");
								//if it is the first split-ok  //cant split an hand with an Ace from splitted hand
								if((player.hands.size()==1)||(h.getHand().getFirst().getRank()!=Rank.ACE))
								player.hands.add(new Hand(h.getHand().removeLast(), shoe.takeCard()));
								h.addCard(shoe.takeCard());
								this.showCards();
							}
						}*/
					}else System.out.println("You cannot use side rules at the moment");
					break;
				case "2":
					if(prevBetFlag&&sideRules){
						System.out.println("double option");
					}else System.out.println("You cannot use side rules at the moment");
					break;
				case "ad":
					if(prevBetFlag){
						System.out.println("advice option");
					}else System.out.println("You havent placed your bet yet");
					break;
				case "st":
					if(prevBetFlag){
						System.out.println("statistics option");
					}else System.out.println("You havent placed your bet yet");
					break;
			}
		}
	}

	public static void main(String[] args) {
		Game game=null;
		char mode='k';
		if(args.length<6){
			//System.out.println(args.length);
			System.out.println("Wrong command input. Please use one of the following:");
			System.out.println("Usage for interactive mode: -i min-bet max-bet balance shoe shuffle");
			System.out.println("Usage for debug mode: -d min-bet max-bet balance shoe-file cmd-file");
			System.out.println("Usage for simulation mode: -s min-bet max-bet balance shuffle s-number strategy");
			System.exit(1);//minumum arguments of every mode are six
		}
		//System.out.println(args.length);
		
		if(Integer.parseInt(args[1])<1){
			System.out.println("minBet should be at least 1");
			System.exit(3);//minbet>1
		}
		if(Integer.parseInt(args[2])<10*Integer.parseInt(args[1]) ||Integer.parseInt(args[2])>20*Integer.parseInt(args[1])){
			System.out.println("maxBet not in correct parameters");
			System.exit(4);//10*minbet<=maxbet<=20*minbet
		}
		if(Integer.parseInt(args[3])<50*Integer.parseInt(args[1])){
			System.out.println("Balance should be 50 times superior to minBet");
			System.exit(5);//balance>=50*minbet
		}
		
		if(args[0].equals("-i")){
			if(args.length != 6) System.out.println("Usage for interactive mode: -i min-bet max-bet balance shoe shuffle");
			int shoe=Integer.parseInt(args[4]);
			if(shoe<4||shoe>8){
				System.out.println("Not enough shoes");
				System.exit(6);
			}
			int shuffle=Integer.parseInt(args[5]);
			int balance=Integer.parseInt(args[3]);
			int maxBet=Integer.parseInt(args[2]);
			int minBet=Integer.parseInt(args[1]);
			if(shuffle<10||shuffle>100){
				System.out.println("Wrong shuffling percentage");
				System.exit(7);
			}
			//(int minBet,	int maxBet, int playersBalance,	int nDecks,	int shufflePercentage
			System.out.println("Entering interactive mode");
			game= new Game(minBet,	maxBet, balance,	shoe,	shuffle);
			mode='i';
		}
		//debug mode
		else if(args[0].equals("-d")){
			if(args.length != 6) System.out.println("Usage for debug mode: -d min-bet max-bet balance shoe-file cmd-file");
			//inicializar o game e fazer load do barulho de um file
			
			game= new Game(1,	1000, 50,	4,	58);
			mode='d';
		}
		//simulation mode
		else if(args[0].equals("-s")){
			if(args.length != 8) System.out.println("Usage for simulation mode: -s min-bet max-bet balance shuffle s-number strategy");
			//
			mode='s';
		}else{
			System.out.println("Wrong command input. Please use one of the following:");
			System.out.println("Usage for interactive mode: -i min-bet max-bet balance shoe shuffle");
			System.out.println("Usage for debug mode: -d min-bet max-bet balance shoe-file cmd-file");
			System.out.println("Usage for simulation mode: -s min-bet max-bet balance shuffle s-number strategy");
			System.exit(2);
		}
		game= new Game(1,	1000, 50,	4,	58);
		game.play(mode);
		//System.out.println("Error");
	}

}
